{"version":3,"sources":["Components/CartItem.js","Components/BuyPage.js","Components/Cart.js","App.js","index.js"],"names":["CartItem","product","addInCart","Card","className","CardImg","top","height","width","src","smallImage","CardBody","CardTitle","productName","CardText","productPrice","Button","color","onClick","BuyPage","useState","setProduct","fetchPhotos","Axios","get","data","photos","allProduct","map","photo","medium","tinyImage","tiny","random","word","commerce","price","id","uuid","useEffect","Container","fluid","Row","Col","md","key","Cart","cartItem","removeItem","buyNow","amount","forEach","item","parseFloat","ListGroup","ListGroupItem","length","CardHeader","CardFooter","App","setCartItem","findIndex","Array","toast","type","filter","singleItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2139b69.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    Button\r\n} from \"reactstrap\";\r\n\r\n\r\nconst CartItem = ({product, addInCart}) => {\r\n\r\nreturn(\r\n    <Card className=\"mt-2 nb-1\">\r\n        <CardImg \r\n        top\r\n        height=\"250\"\r\n        width='100%'\r\n        src={product.smallImage}\r\n        />\r\n        <CardBody className=\"text-center\" >\r\n            <CardTitle>{product.productName}</CardTitle>\r\n            <CardText className=\"secondary\" >\r\n                price: RS {product.productPrice}\r\n                </CardText>\r\n                <Button\r\n                color=\"success\"\r\n                onClick={() => addInCart(product)}\r\n                >Buy Now</Button>\r\n        </CardBody>\r\n    </Card>\r\n)\r\n\r\n}\r\n\r\nexport default CartItem;","import React, { useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport CartItem from \"./CartItem\";\r\n\r\nimport {commerce, random} from \"faker\";\r\nimport { Container, Col, Row } from \"reactstrap\";\r\n\r\nconst apiKey = \"INSERT_YOUR_KEY_HERE\";\r\n\r\nconst url = 'https://api.pexepls.com/v1/search?query=laptop&per_page=6&page=1';\r\n\r\nconst localurl = 'https://myjson.dit.upm.es/api/bins/a8wb';\r\n\r\nconst BuyPage = ({addInCart}) => {\r\n\r\nconst [product, setProduct] = useState([]);\r\n\r\n// const fetchPhotos = async () => {\r\n//     const response = await Axios.get(url, {\r\n//         header: {\r\n//             Authorization: apiKey\r\n//         }\r\n//     });\r\n\r\nconst fetchPhotos = async () => {\r\n    const { data } = await Axios.get(localurl);\r\n\r\n\r\nconst { photos } = data;\r\n\r\nconst allProduct = photos.map(photo => ({\r\n    smallImage: photo.src.medium,\r\n    tinyImage: photo.src.tiny,\r\n    productName: random.word(),\r\n    productPrice: commerce.price(),\r\n    id: random.uuid()\r\n\r\n}));\r\n\r\nsetProduct(allProduct);\r\n\r\n};\r\n\r\nuseEffect(() => {\r\n    fetchPhotos();\r\n}, []);\r\n\r\n\r\n\r\nreturn(\r\n    <Container fluid>\r\n        <h1 className=\"text-success text-center\" >\r\n            Buy page\r\n        </h1>\r\n        <Row>\r\n            {product.map(product => (\r\n                <Col md={4} key={product.id}>\r\n                    <CartItem product={product} addInCart={addInCart} />\r\n                </Col>\r\n            ))}\r\n        </Row>\r\n    </Container>\r\n)\r\n\r\n};\r\n\r\nexport default BuyPage;","import React from \"react\";\r\nimport {\r\n    Container,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button,\r\n    CardHeader,\r\n    CardBody,\r\n    Card,\r\n    CardFooter,\r\n    Col,\r\n    Row,\r\n} from \"reactstrap\";\r\n\r\nconst Cart = ({cartItem, removeItem, buyNow}) => {\r\n    let amount = 0;\r\n\r\n    cartItem.forEach(item => {\r\n        amount = parseFloat(amount) + parseFloat(item.productPrice);\r\n    });\r\n\r\n    return(\r\n        <Container fluid>\r\n            <h1 className=\"text-success\">Your Cart</h1>\r\n            <ListGroup>\r\n                {cartItem.map(item => (\r\n                    <ListGroupItem key={item.id}>\r\n                        <Row>\r\n                            <Col>\r\n                            <img \r\n                            height={80}\r\n                            src={item.tinyImage}\r\n                            />\r\n                            </Col>\r\n                            <Col className=\"text-center\">\r\n                            <div className=\"text-primary\">\r\n                                {item.productName}\r\n                            </div>\r\n                            <span>price :- {item.productPrice}</span>\r\n                            <Button color=\"danger\" className=\"m-2\" onClick={() => removeItem(item)}>Remove</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroupItem>\r\n                ))}\r\n            </ListGroup>\r\n            \r\n            {/* If everything is empty  */}\r\n                    {\r\n                        cartItem.length >= 1 ? (\r\n                            <Card className=\"text-center mt-3\">\r\n                                <CardHeader>\r\n                                    Grand Total\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    Your amount is for {cartItem.length} product is {amount}\r\n                                </CardBody>\r\n                                <CardFooter>\r\n                                    <Button color=\"success\" onClick={buyNow}>Pay Here</Button>\r\n                                </CardFooter>\r\n                            </Card>\r\n                        )  : (\r\n                            <h1 className=\"text-warning\">Cart is empty</h1>\r\n                        )\r\n                    }\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default Cart;","import React, { useState } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport './App.css';\n\nimport { Container, Row, Col } from 'reactstrap';\nimport { ToastContainer, toast} from \"react-toastify\"\n\nimport BuyPage from './Components/BuyPage';\nimport Cart from './Components/Cart';\n\nfunction App() {\nconst [cartItem, setCartItem] = useState([]);\n\nconst addInCart = item => {\nconst isAlreadyAdded = cartItem.findIndex(function(Array){ //Returns the index of the first element in the array where predicate is true, and -1 otherwise.\n  return Array.id === item.id;\n});\n\n// The findIndex will return any index but not -1 if the item is already in the cart\n\nif(isAlreadyAdded !== -1) {\n  toast('Already added in cart', {\n    type: \"error\"\n});\nreturn;\n}\nsetCartItem([...cartItem, item]); \n\n// ... => spread operator\n\n};\n\nconst buyNow = () => {\n  setCartItem([]);\n\n  toast('Purchase Complete' , {\n    type: \"success\"\n  });\n};\n\nconst removeItem = item => {\n  setCartItem(cartItem.filter(singleItem => singleItem.id !== item.id));\n};\n\n\n\n\n\n\n  return (\n    <Container fluid>\n      <ToastContainer />\n      <Row>\n        <Col md='8'>\n          <BuyPage addInCart={addInCart} />\n        </Col>\n        <Col md='4'>\n          <Cart cartItem={cartItem} removeItem={removeItem} buyNow={buyNow}/>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}